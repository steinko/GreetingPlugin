/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.41"
   `java-gradle-plugin`
    id("com.gradle.plugin-publish") version "0.10.0"
}

pluginBundle {
    website = 'http://www.gradle.org/'
    vcsUrl =  "https://github.com/steinkor/GreetingPlugin"
    tags = listOf("symbolic link", "linux")
}
    
gradlePlugin {
    plugins {
        create("greetingPlugin") {
            id = "org.steinko.greetingPlugin"
            implementationClass = "GreetingPlugin"
            displayName = "Greeting Plugin"
            description = "A plugin to greet"
        }
    }
}

group = "org.steinko"
version = "1.0"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

open class GreetingPluginExtension {
     var message: String? = null
     var greeter: String? = null
   }

class GreetingPlugin : Plugin<Project> {
      override fun apply(project:Project) {
           val extension = project.extensions.create<GreetingPluginExtension>("greeting")
           project.task("hello") {
               doLast { 
                   println("${extension.message} from ${extension.greeter}")

           }
       }
     }
}

apply<GreetingPlugin>()

configure<GreetingPluginExtension> {
    message = "Hi" 
    greeter = "Gradle"
}

open class GreetingToFileTask : DefaultTask() {

    var destination: Any? = null
    
    fun getDestination(): File {
        return project.file(destination!!)
      }
      
     @TaskAction
     fun greet()  {
         val file = getDestination()
         file.parentFile.mkdirs()
         file.writeText("Hello!")
       }
     }
     
 tasks.register<GreetingToFileTask>("greet")  {
      destination =  { project.extra["greetingFile"]!! } 
      } 
      
 tasks.register("sayGreeting") {
    dependsOn("greet")
    doLast {
        println(file(project.extra["greetingFile"]!!).readText())
    }
}

extra["greetingFile"] = "$buildDir/hello.txt"     